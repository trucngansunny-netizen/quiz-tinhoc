# ai_tin_web.py
import streamlit as st
import os
import tempfile
from pathlib import Path
from openpyxl import load_workbook

# import x·ª≠ l√Ω/ch·∫•m t·ª´ core.py (b·∫°n ƒë√£ c√≥)
from core import (
    load_criteria,
    grade_word,
    grade_ppt,
    grade_scratch,
    pretty_name_from_filename,
    ensure_workbook_exists,
)

# ========== C·∫•u h√¨nh ========== #
EXCEL_FILE = "ketqua_tonghop.xlsx"
CRITERIA_FOLDER = "criteria"

# Danh s√°ch l·ªõp (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
CLASSES = ["3A1","3A2","3A3","3A4","4A1","4A2","4A3","4A4","4A5","5A1","5A2","5A3","5A4","5A5"]

# ·∫¢nh n·ªÅn & logo (file n·∫±m c√πng folder v·ªõi ai_tin_web.py)
BASE_DIR = os.path.dirname(__file__)
BG_FILES = {
    "default": os.path.join(BASE_DIR, "bg_default.jpg"),
    3: os.path.join(BASE_DIR, "bg_3.jpg"),
    4: os.path.join(BASE_DIR, "bg_4.jpg"),
    5: os.path.join(BASE_DIR, "bg_5.jpg"),
}
LOGO_PATH = os.path.join(BASE_DIR, "logo_tranquoctoan.png")

st.set_page_config(page_title="AI-TIN Web", page_icon="üß†", layout="centered")

# ========== Helper ==========
def safe_grade_from_class(class_name):
    # L·∫•y s·ªë ƒë·∫ßu ti√™n l√†m kh·ªëi (an to√†n h∆°n)
    digits = "".join(ch for ch in class_name if ch.isdigit())
    return int(digits[0]) if digits else 0

def save_uploaded(tmpfile):
    # l∆∞u file upload t·∫°m (tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n)
    suffix = os.path.splitext(tmpfile.name)[1]
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=suffix)
    tmp.write(tmpfile.getbuffer())
    tmp.close()
    return tmp.name

def append_to_sheet(class_name, student_name, subject, score, notes):
    ensure_workbook_exists(EXCEL_FILE)
    wb = load_workbook(EXCEL_FILE)
    # t·∫°o sheet theo l·ªõp n·∫øu ch∆∞a c√≥
    if class_name not in wb.sheetnames:
        ws = wb.create_sheet(title=class_name)
        ws.append(["H·ªç t√™n h·ªçc sinh","M√¥n","ƒêi·ªÉm","Nh·∫≠n x√©t"])
    else:
        ws = wb[class_name]
    ws.append([student_name, subject, score, "; ".join(notes)])
    wb.save(EXCEL_FILE)

def criteria_file_exists(subj_code, grade):
    # subj_code: 'word' / 'ppt' / 'scratch'
    fname = f"{subj_code}{grade}.json"
    return os.path.exists(os.path.join(BASE_DIR, CRITERIA_FOLDER, fname))

# ========== CSS + Background ==========
def set_background_for_grade(grade):
    bg = BG_FILES.get(grade, BG_FILES["default"])
    # n·∫øu file kh√¥ng t·ªìn t·∫°i th√¨ d√πng default
    if not os.path.exists(bg):
        bg = BG_FILES["default"]
    # CSS: set background + overlay m·ªù t·ªëi
    css = f"""
    <style>
    .stApp {{
        background: linear-gradient(rgba(0,0,0,0.35), rgba(0,0,0,0.35)), url("file://{bg}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        color: #111;
        font-family: 'Segoe UI', sans-serif;
    }}
    /* logo g√≥c tr√°i */
    .logo-top-left {{
        position: fixed;
        top: 12px;
        left: 14px;
        z-index: 9999;
    }}
    .card {{
        background: rgba(255,255,255,0.92);
        padding: 18px;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.25);
    }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)
    # hi·ªÉn th·ªã logo g√≥c tr√™n tr√°i (n·∫øu c√≥)
    if os.path.exists(LOGO_PATH):
        st.markdown(
            f"""<div class="logo-top-left"><img src="file://{LOGO_PATH}" width="64" style="border-radius:50%; opacity:0.95;"></div>""",
            unsafe_allow_html=True
        )

# ========== Giao di·ªán ==========
set_background_for_grade("default")  # m·∫∑c ƒë·ªãnh tr∆∞·ªõc khi ch·ªçn l·ªõp

st.markdown("<div style='height:40px'></div>", unsafe_allow_html=True)
st.markdown('<div class="card">', unsafe_allow_html=True)
st.markdown("<h1 style='margin:0;'>üß† AI-TIN Web ‚Äî Tr·ª£ l√Ω ch·∫•m b√†i</h1>", unsafe_allow_html=True)
st.markdown("<p style='margin-top:6px; color:#333;'>Ch·ªçn l·ªõp v√† t·∫£i file ƒë·ªÉ ch·∫•m t·ª± ƒë·ªông</p>", unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)
st.markdown("<div style='height:12px'></div>", unsafe_allow_html=True)

# Sidebar: ch·ªçn l·ªõp
st.sidebar.header("üéì Ch·ªçn l·ªõp h·ªçc")
selected_class = st.sidebar.selectbox("Ch·ªçn l·ªõp", CLASSES)
grade = safe_grade_from_class(selected_class)

# Thay n·ªÅn theo kh·ªëi ƒë√£ ch·ªçn
set_background_for_grade(grade)

# Hi·ªÉn th·ªã ti√™u ƒë·ªÅ m√¥n theo kh·ªëi
st.sidebar.subheader(f"üìö Ti√™u ch√≠ ch·∫•m cho kh·ªëi {grade}")

# Map hi·ªÉn th·ªã label -> subject code
SUBJ_LABELS = {
    "Word": "word",
    "B√†i thuy·∫øt tr√¨nh PowerPoint": "ppt",
    "L·∫≠p tr√¨nh Scratch": "scratch"
}

# Ki·ªÉm tra m√¥n n√†o c√≥ file criteria cho kh·ªëi hi·ªán t·∫°i
available = {}
for label, code in SUBJ_LABELS.items():
    exists = criteria_file_exists(code, grade)
    available[label] = exists

# Sidebar selectbox ƒë·ªÉ ch·ªçn xem ti√™u ch√≠ cho m√¥n n√†o (ch·ªâ hi·ªán labels)
available_labels = [lbl for lbl, ok in available.items() if ok]
if not available_labels:
    # n·∫øu kh√¥ng c√≥ ti√™u ch√≠ n√†o (v√≠ d·ª• kh·ªëi 3 c√≥ ch·ªâ ppt), hi·ªÉn th·ªã th√¥ng b√°o
    st.sidebar.info(f"‚ö†Ô∏è Kh·ªëi {grade} hi·ªán ch∆∞a c√≥ ti√™u ch√≠ hi·ªÉn th·ªã (ho·∫∑c kh√¥ng h·ªçc c√°c ph·∫ßn m·ªÅm).")
    subj_choice_label = st.sidebar.selectbox("Xem ti√™u ch√≠ cho", list(SUBJ_LABELS.keys()))
else:
    subj_choice_label = st.sidebar.selectbox("Xem ti√™u ch√≠ cho", available_labels)

# N·∫øu m√¥n ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≥ ti√™u ch√≠ => show message
subj_code = SUBJ_LABELS.get(subj_choice_label, None)
if subj_code is None:
    st.sidebar.error("L·ªói ch·ªçn m√¥n.")
else:
    # n·∫øu file ti√™u ch√≠ t·ªìn t·∫°i => load v√† hi·ªÉn th·ªã
    crit = None
    if criteria_file_exists(subj_code, grade):
        crit = load_criteria(subj_code, grade, CRITERIA_FOLDER)
        if crit is None:
            st.sidebar.error(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file ti√™u ch√≠ cho {subj_choice_label} kh·ªëi {grade}.")
        else:
            st.sidebar.markdown("### üîç Ti√™u ch√≠")
            for it in crit.get("tieu_chi", []):
                mo = it.get("mo_ta", "")
                diem = it.get("diem", 0)
                st.sidebar.markdown(f"- {mo} (`{diem}` ƒë)")
    else:
        # r√µ r√†ng hi·ªÉn th·ªã n·∫øu kh·ªëi kh√¥ng h·ªçc ph·∫ßn m·ªÅm n√†y
        not_learn_msg = ""
        if subj_code == "word" and grade == 3:
            not_learn_msg = f"Kh·ªëi {grade} kh√¥ng h·ªçc ph·∫ßn m·ªÅm Word."
        elif subj_code == "ppt" and grade == 5:
            not_learn_msg = f"Kh·ªëi {grade} kh√¥ng h·ªçc ph·∫ßn m·ªÅm PowerPoint."
        elif subj_code == "scratch" and grade == 3:
            not_learn_msg = f"Kh·ªëi {grade} kh√¥ng h·ªçc ph·∫ßn m·ªÅm Scratch."
        else:
            not_learn_msg = f"Kh√¥ng c√≥ ti√™u ch√≠ cho {subj_choice_label} kh·ªëi {grade}."
        st.sidebar.warning(not_learn_msg)

# ========== Main: Upload & Ch·∫•m ==========
st.markdown("<div class='card' style='max-width:900px; margin: 10px auto;'>", unsafe_allow_html=True)
st.markdown(f"**L·ªõp ƒëang ch·ªçn:** {selected_class} (Kh·ªëi {grade})")

st.write("Ch·ªçn lo·∫°i b√†i ƒë·ªÉ n·ªôp v√† ch·∫•m (h·ªá th·ªëng s·∫Ω ch·ªâ hi·ªán nh·ªØng lo·∫°i ph√π h·ª£p v·ªõi kh·ªëi).")

cols = st.columns(3)

uploaded_word = None
uploaded_ppt = None
uploaded_sb3 = None

with cols[0]:
    if criteria_file_exists("word", grade):
        uploaded_word = st.file_uploader("üìÑ File Word (.docx)", type=["docx"], key="word")
    else:
        st.info("Word: Kh√¥ng √°p d·ª•ng cho kh·ªëi n√†y." if grade in (3,) else "Word: Kh√¥ng c√≥ ti√™u ch√≠.")

with cols[1]:
    if criteria_file_exists("ppt", grade):
        uploaded_ppt = st.file_uploader("üéûÔ∏è File PowerPoint (.pptx)", type=["pptx"], key="ppt")
    else:
        st.info("PowerPoint: Kh√¥ng √°p d·ª•ng cho kh·ªëi n√†y." if grade in (5,) else "PowerPoint: Kh√¥ng c√≥ ti√™u ch√≠.")

with cols[2]:
    if criteria_file_exists("scratch", grade):
        uploaded_sb3 = st.file_uploader("üê±‚Äçüíª File Scratch (.sb3)", type=["sb3"], key="sb3")
    else:
        st.info("Scratch: Kh√¥ng √°p d·ª•ng cho kh·ªëi n√†y." if grade in (3,) else "Scratch: Kh√¥ng c√≥ ti√™u ch√≠.")

st.markdown("</div>", unsafe_allow_html=True)

# X·ª≠ l√Ω t·ª´ng upload
if uploaded_word is not None:
    tmpf = save_uploaded(uploaded_word)
    # load criteria b·∫±ng core.load_criteria (trong core.py, filename = f"{subject}{grade}.json")
    criteria = load_criteria("word", grade, CRITERIA_FOLDER)
    if criteria is None:
        st.error("Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ Word cho kh·ªëi n√†y.")
    else:
        score, notes = grade_word(tmpf, criteria)
        if score is None:
            st.error("L·ªói khi ch·∫•m Word: " + (notes[0] if notes else ""))
        else:
            hocsinh = pretty_name_from_filename(uploaded_word.name)
            st.success(f"üíØ ƒêi·ªÉm: {score}/10")
            for n in notes: st.write("‚Ä¢ " + n)
            append_to_sheet(selected_class, hocsinh, "Word", score, notes)

if uploaded_ppt is not None:
    tmpf = save_uploaded(uploaded_ppt)
    criteria = load_criteria("ppt", grade, CRITERIA_FOLDER)
    if criteria is None:
        st.error("Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ PowerPoint cho kh·ªëi n√†y.")
    else:
        score, notes = grade_ppt(tmpf, criteria)
        if score is None:
            st.error("L·ªói khi ch·∫•m PowerPoint: " + (notes[0] if notes else ""))
        else:
            hocsinh = pretty_name_from_filename(uploaded_ppt.name)
            st.success(f"üíØ ƒêi·ªÉm: {score}/10")
            for n in notes: st.write("‚Ä¢ " + n)
            append_to_sheet(selected_class, hocsinh, "PowerPoint", score, notes)

if uploaded_sb3 is not None:
    tmpf = save_uploaded(uploaded_sb3)
    criteria = load_criteria("scratch", grade, CRITERIA_FOLDER)
    if criteria is None:
        st.error("Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ Scratch cho kh·ªëi n√†y.")
    else:
        score, notes = grade_scratch(tmpf, criteria)
        if score is None:
            st.error("L·ªói khi ch·∫•m Scratch: " + (notes[0] if notes else ""))
        else:
            hocsinh = pretty_name_from_filename(uploaded_sb3.name)
            st.success(f"üíØ ƒêi·ªÉm: {score}/10")
            for n in notes: st.write("‚Ä¢ " + n)
            append_to_sheet(selected_class, hocsinh, "Scratch", score, notes)

# Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n file Excel
st.info(f"K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u v√†o file: `{os.path.abspath(EXCEL_FILE)}` (m·ªói sheet l√† 1 l·ªõp).")
