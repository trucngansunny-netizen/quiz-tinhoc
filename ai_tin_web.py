from flask import Flask, render_template, request, url_for
import json
import os

app = Flask(__name__)

# --- ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ti√™u ch√≠ ---
CRITERIA_DIR = os.path.join(os.path.dirname(__file__), "criteria")

# --- X√°c ƒë·ªãnh n·ªÅn theo kh·ªëi ---
def get_background_for_grade(grade):
    return {
        "3": "bg_3.jpg",
        "4": "bg_4.jpg",
        "5": "bg_5.jpg"
    }.get(grade, "bg_default.jpg")


# --- T·∫£i file ti√™u ch√≠ ---
def load_criteria(software, grade):
    filename = None

    # Map file theo kh·ªëi v√† ph·∫ßn m·ªÅm
    if software == "word" and grade == "3":
        return {"tieu_chi": [{"mo_ta": "Kh·ªëi 3 kh√¥ng h·ªçc ph·∫ßn m·ªÅm Word", "diem": ""}]}
    elif software == "powerpoint" and grade == "5":
        return {"tieu_chi": [{"mo_ta": "Kh·ªëi 5 kh√¥ng h·ªçc ph·∫ßn m·ªÅm PowerPoint", "diem": ""}]}
    elif software == "scratch" and grade == "3":
        return {"tieu_chi": [{"mo_ta": "Kh·ªëi 3 kh√¥ng h·ªçc ph·∫ßn m·ªÅm Scratch", "diem": ""}]}
    else:
        filename = f"{software}{grade}.json"

    # üîß Ch·ªâ s·ª≠a ƒë√∫ng d√≤ng d∆∞·ªõi ƒë√¢y, th√™m CRITERIA_DIR v√†o ƒë∆∞·ªùng d·∫´n
    file_path = os.path.join(CRITERIA_DIR, filename)

    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return None


@app.route("/", methods=["GET", "POST"])
def home():
    selected_class = None
    selected_software = None
    criteria = None
    message = None
    background = "bg_default.jpg"

    if request.method == "POST":
        selected_class = request.form.get("lop", "")
        selected_software = request.form.get("software", "")
        if selected_class:
            grade = selected_class[0]  # L·∫•y s·ªë kh·ªëi t·ª´ l·ªõp
            background = get_background_for_grade(grade)

            if selected_software:
                # üîß Ch·ªâ s·ª≠a ƒë√∫ng d√≤ng n√†y
                criteria = load_criteria(selected_software, grade)
                if not criteria:
                    message = f"‚ö†Ô∏è Kh·ªëi {grade} hi·ªán ch∆∞a c√≥ ti√™u ch√≠ hi·ªÉn th·ªã (ho·∫∑c kh√¥ng h·ªçc ph·∫ßn m·ªÅm n√†y)."
            else:
                message = "‚ö†Ô∏è Vui l√≤ng ch·ªçn ph·∫ßn m·ªÅm ƒë·ªÉ xem ti√™u ch√≠."
        else:
            message = "‚ö†Ô∏è Vui l√≤ng ch·ªçn l·ªõp h·ªçc."

       # --- tr∆∞·ªõc khi tr·∫£ v·ªÅ template: t·∫°o dict avail_by_grade ƒë·ªÉ template d√πng (tr√°nh Undefined) ---
    # subjects v√† t√™n file t∆∞∆°ng ·ª©ng trong th∆∞ m·ª•c criteria
    subj_file_map = {
        "word":   lambda g: f"word{g}.json",
        "powerpoint": lambda g: f"ppt{g}.json",
        "scratch": lambda g: f"scratch{g}.json",
    }

    avail_by_grade = {}
    for g in ("3", "4", "5"):
        avail = {}
        for subj, fn_builder in subj_file_map.items():
            fname = fn_builder(g)
            path = os.path.join(CRITERIA_DIR, fname)
            avail[subj] = os.path.exists(path)
        avail_by_grade[g] = avail

    return render_template(
        "index.html",
        selected_class=selected_class,
        selected_software=selected_software,
        criteria=criteria,
        message=message,
        background=background,
        avail_by_grade=avail_by_grade  # <-- th√™m bi·∫øn n√†y cho template (ƒë√£ c√≥ tojson)
    )

if __name__ == "__main__":
    app.run(debug=True)

